{# Setting hsts in a variable since it has to be repeated several times. Could
   probably also be loaded from a map to enable configuration from pillar -#}
{% set hsts = "max-age=31536000; includeSubDomains" -%}

{% for upstream_identifier, upstream in upstreams.items() -%}
upstream {{ upstream_identifier }} {
    server {{ upstream.hostname }}:{{ upstream.port }};
    keepalive 8;
}

{% endfor -%}

server {
  listen [::]:80{{ ' ' + listen_parameters if listen_parameters else '' }};
  server_name {{ server_name }};
  charset utf-8;
  return 301 https://{{ https_redirect }}$request_uri;
}

server {
  listen [::]:443 ssl{{ ' ' + listen_parameters if listen_parameters else '' }};
  server_name {{ server_name }};
  charset utf-8;

  client_max_body_size {{ client_max_body_size }};

  ssl_certificate {{ cert }};
  ssl_certificate_key {{ key }};
  add_header Strict-Transport-Security "{{ hsts }}" always;

  {% for error_code in error_pages -%}
  error_page {{ error_code }} /{{ error_code }}-{{ server_name }};
  {% endfor %}

  {% for extra_server_dict in extra_server_config -%}
  {% for key, value in extra_server_dict.items() -%}
  {{ key }} {{ value }};
  {% endfor -%}
  {% endfor %}

  {% if redirect -%}
  return {{ redirect }};
  {% endif %}

  {% for url, backend in backends.items() -%}
  location {{ url }} {
    proxy_pass {{ backend.protocol }}://{{ backend.upstream_identifier }};

    {% if backend.pam_auth -%}
    # Restrict access to users on this machine with PAM
    auth_pam "Restricted";
    auth_pam_service_name "nginx";
    {% endif -%}

    {% if backend.rate_limit -%}
    limit_req {{ backend.rate_limit }};
    {% endif -%}

    {% for extra_location_dict in backend.extra_location_config -%}
    {% for key, value in extra_location_dict.items() -%}
    {{ key }} {{ value }};
    {% endfor -%}
    {% endfor %}

    # Needs to be specified here too since cache_params also include a add_header directive. The
    # parent directive ensures it's added to the other location blocks.
    add_header Strict-Transport-Security "{{ hsts }}" always;

    include proxy_params;
    include cache_params;

    proxy_set_header Host "{{ backend.upstream_hostname }}";

    proxy_ssl_trusted_certificate '{{ backend.upstream_trust_root }}';
    proxy_ssl_server_name on;
    proxy_ssl_name {{ backend.upstream_hostname }};

    # The verification depth needed for Heroku is currently only 2, but since they might
    # change CA and certificate layout on a whim we allow a depth of 3.
    proxy_ssl_verify_depth 3;
  }

  {% endfor -%}

  {% for extra_location, block in extra_locations.items() %}
  location {{ extra_location }} {
    {{ block }}
  }
  {% endfor %}

  {% for error_code, content in error_pages.items() %}
  location = /{{ error_code }}-{{ server_name }} {
    root /etc/nginx/html;
    {# Skip extension on the file so that we can set any content-type -#}
    default_type {{ content['content_type'] }};
    internal;
  }
  {% endfor %}
}
