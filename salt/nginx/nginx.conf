# nginx Configuration File
# http://wiki.nginx.org/Configuration

# Based on HTML5Boilerplate's setup:
# https://github.com/h5bp/server-configs-nginx/blob/master/nginx.conf

# Run as a less privileged user for security reasons.
user nginx nginx;

# How many worker threads to run;
# "auto" sets it to the number of CPU cores available in the system, and
# offers the best performance. Don't set it higher than the number of CPU
# cores if changing this parameter.

# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes auto;

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile 8192;

{% if modules -%}
# Load extension modules
{% for module in modules -%}
load_module {{ module }};
{% endfor %}
{% endif -%}

events {
  # When you need > 8000 * cpu_cores connections, you start optimizing your OS,
  # and this is probably the point at where you hire people who are smarter than
  # you, as this is *a lot* of requests.
  worker_connections 8000;
}

# Default error log file
# (this is only used when you don't override error_log on a server{} level)
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

http {

  {% for extra_http_dict in (extra_http or {}) %}
  {% for key, value in extra_http_dict.items() %}
  {{ key }} {{ value }}
  {% endfor %}
  {% endfor %}

  # Hide nginx version information.
  server_tokens off;

  # Define the MIME types for files.
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # Format to use in log files
  {% for log_format, format in log_formats.items() %}
  log_format {{ log_format }} '{{ format }}';
  {% endfor %}

  {% for log_file_name, format_spec in log_files.items() %}
  access_log /var/log/nginx/{{ log_file_name }} {{ format_spec }};
  {% endfor %}

  {% for log_output in log_outputs %}
  {{ log_output.logger }} {{ log_output.spec }} {{ log_output.format }};
  {% endfor %}

  # How long to allow each connection to stay idle; longer values are better
  # for each individual client, particularly for SSL, but means that worker
  # connections are tied up longer.
  keepalive_timeout {{ keepalive_timeout }};

  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  sendfile        on;

  # Tell Nginx not to send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out. (adds TCP_CORK)
  tcp_nopush      on;


  # Compression

  # Enable Gzip compressed.
  gzip on;

  # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
  gzip_http_version  1.0;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and cpu usage, offering about
  # 75% reduction for most ascii files (almost identical to level 9).
  gzip_comp_level    5;

  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length    256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied       any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary          on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/rss+xml
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/svg+xml
    image/x-icon
    text/css
    text/plain
    text/x-component;
  # text/html is always compressed by HttpGzipModule


  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It is best if you enable this in a location{} block for
  # a specific directory, or on an individual server{} level.
  # gzip_static on;

  # Note that TLSv1.1 and TLSv1.2 are immune to the beast attack but only work with OpenSSL v1.0.1 and higher and has limited client support.
  # ciphersuite from https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_Ciphersuite
  ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers                {{ ':'.join([
    'ECDHE-ECDSA-AES256-GCM-SHA384',
    'ECDHE-RSA-AES256-GCM-SHA384',
    'ECDHE-ECDSA-AES128-GCM-SHA256',
    'ECDHE-RSA-AES128-GCM-SHA256',
    'DHE-RSA-AES128-GCM-SHA256',
    'DHE-DSS-AES128-GCM-SHA256',
    'kEDH+AESGCM',
    'ECDHE-ECDSA-AES256-SHA384',
    'ECDHE-RSA-AES256-SHA384',
    'ECDHE-ECDSA-AES256-SHA',
    'ECDHE-RSA-AES256-SHA',
    'ECDHE-ECDSA-AES128-SHA256',
    'ECDHE-RSA-AES128-SHA256',
    'ECDHE-ECDSA-AES128-SHA',
    'ECDHE-RSA-AES128-SHA',
    'DHE-RSA-AES256-SHA256',
    'DHE-DSS-AES256-SHA',
    'DHE-RSA-AES256-SHA',
    'DHE-RSA-AES128-SHA256',
    'DHE-RSA-AES128-SHA',
    'DHE-DSS-AES128-SHA256',
    'AES256-GCM-SHA384',
    'AES128-GCM-SHA256',
    'AES256',
    'AES128',
    'HIGH',
    '!aNULL',
    '!eNULL',
    '!EXPORT',
    '!DES',
    '!3DES',
    '!MD5',
    '!PSKF',
    ]) }};
  ssl_prefer_server_ciphers  on;

  # Set ephemeral DH key parameters to a larger size than default (default 1024)
  ssl_dhparam ssl/dhparam.pem;

  # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
  # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
  # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
  # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
  ssl_session_cache    shared:SSL:50m; # a 1mb cache can hold about 4000 sessions
  ssl_session_timeout  30m;

  # This default SSL certificate will be served whenever the client lacks support for SNI (Server Name Indication).
  # Make it a symlink to the most important certificate you have, so that users of IE 8 and below on WinXP can see your main site without SSL errors.
  #ssl_certificate      /etc/nginx/default_ssl.crt;
  #ssl_certificate_key  /etc/nginx/default_ssl.key;

  # Make sure bad subdomains return a 404 and not simply the first site if finds
  {% if add_default_http %}
  server {
    listen [::]:80 default_server ipv6only=off;
    server_name badsubdomainprobably "";
    return 444;
  }
  {% endif %}

  {% if add_default_https %}
  # Make sure bad subdomains return 404 also for https connections
  server {
    listen [::]:443 default_server ipv6only=off ssl;
    server_name httpsbadsubdomain "";
    ssl_certificate ssl/default.crt;
    ssl_certificate_key private/default.key;
    return 444;
  }
  {% endif %}

  include rate_limit_zones.conf;

  # Enable caching of proxy upstream responses
  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=proxy_upstream_cache:1m max_size=500m inactive=30m;

  include sites-enabled/*;
}
